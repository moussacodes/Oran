 

let x = 42

 

const PI = 3.14159

 
let arr: Array<Float> = [1.2, 75.4]

 
fn add(x, y) {
return x + y
}

 
let result = add(5, 7)

 
fn add(x: Int, y: Int): Int {
return x + y
}

 

import Math
import List as L

 
 
 
for i = 1 to 10 {
print(i)
}

 
 
class Rectangle {
    constructor(width, height) {
        this.width = width
        this.height = height
    }

    method area() {
        return this.width * this.height
    }

}
 

 
let add = fn (x, y) => x + y
let double = fn (x) => x * 2
let apply = fn (func, arg) => func(arg)

 
let immutableVar = const 42

 
let a = match x {
| 0 => "Zero"
| n if n < 0 => "Negative"
| _ => "Positive"
}

 
let square = fn (x) => x * x

 
let makeCounter = fn () => {
let count = ref 0
fn () => {
count := !count + 1
!count
}
}

 
let rec factorial = fn (n, acc = 1) =>
if n <= 1 then acc else factorial(n - 1, n * acc)

 
 
let pureAdd = fn (x, y) => x + y

 
let maybeDouble = fn (x) => if x? then Just(x * 2) else Nothing

 

let add = fn (x, y) => x + y 

 
type Shape =
| Circle of Float
| Rectangle of { width: Float, height: Float }

 
let curryAdd = fn (x) => fn (y) => x + y

 
 
type List a =
| Nil
| Cons a (List a)

 
let nums = range(1, Infinity)
let squares = map(fn (x) => x * x, nums)

 
 
